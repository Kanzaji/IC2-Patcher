import com.google.common.io.ByteStreams
import com.google.common.io.Files
import com.nothome.delta.Delta
import lzma.streams.LzmaOutputStream
import net.minecraftforge.gradle.tasks.ExtractTask
import net.minecraftforge.gradle.tasks.PatchSourcesTask
import net.minecraftforge.gradle.tasks.fernflower.ApplyFernFlowerTask
import net.minecraftforge.gradle.util.patching.BinPatches

import java.util.jar.*
import java.util.jar.Pack200.Packer

buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'de.undercouch:gradle-download-task:4.1.1'
    }
}
apply plugin: 'de.undercouch.download'

def subproject = project(":IndustrialCraft2")
File jarIC2 = new File(buildDir, "tmp/industrialcraft-obf.jar")
File jarDevIC2 = new File(buildDir, "tmp/industrialcraft.jar")
File decompiledJar = new File(buildDir, "tmp/industrialcraft-decompile.jar")
File fixedJar = new File(buildDir, "tmp/industrialcraft-fixed.jar")
File patchedJar = new File(buildDir, "tmp/industrialcraft-patched.jar")
File binPatches = new File(buildDir, 'tmp/binpatches.pack.lzma')
Class<?> classGenPatches = Class.forName("net.minecraftforge.gradle.patcher.TaskGenPatches")

task downloadIC2(type: Download) {
    group 'ic2-patcher'
    src "https://jenkins.ic2.player.to/job/IC2_112/221/artifact/build/libs/industrialcraft-2-${VERSION_IC2}-ex112.jar"
    dest jarIC2
    overwrite false
}

task downloadDevIC2(type: Download) {
    group 'ic2-patcher'
    src "https://jenkins.ic2.player.to/job/IC2_112/221/artifact/build/libs/industrialcraft-2-${VERSION_IC2}-ex112-dev.jar"
    dest jarDevIC2
    overwrite false
}

ApplyFernFlowerTask decompileIC2 = project.tasks.create("decompileIC2", ApplyFernFlowerTask.class)
decompileIC2.setInJar(jarDevIC2)
decompileIC2.setOutJar(decompiledJar)
decompileIC2.setClasspath(project.getConfigurations().getByName('forgeGradleMcDeps'))
decompileIC2.setForkedClasspath(project.getConfigurations().getByName('forgeGradleFfiDeps'))
decompileIC2.dependsOn('downloadDevIC2')

PatchSourcesTask postDecompile = project.tasks.create("applyFFPatches", PatchSourcesTask.class)
postDecompile.setInJar(decompiledJar)
postDecompile.setOutJar(fixedJar)
postDecompile.setPatches(file("ff_patches"))
postDecompile.setDoesCache(false)
postDecompile.setMaxFuzz(2)
postDecompile.setFailOnError(false)
postDecompile.setMakeRejects(true)
postDecompile.dependsOn('decompileIC2')
postDecompile.setGroup("ic2-patcher")

PatchSourcesTask patchSources = project.tasks.create("applyIC2Patches", PatchSourcesTask.class)
patchSources.setInJar(fixedJar)
patchSources.setOutJar(patchedJar)
patchSources.setPatches(file("patches"))
patchSources.setDoesCache(false)
patchSources.setMaxFuzz(2)
patchSources.setFailOnError(false)
patchSources.setMakeRejects(true)
patchSources.dependsOn('applyFFPatches')
patchSources.setGroup("ic2-patcher")

def genPatches = project.tasks.create("genIC2Patches", classGenPatches)
genPatches.setPatchDir('patches/minecraft')
genPatches.setOriginalPrefix('../src-base/minecraft')
genPatches.setChangedPrefix('../src-work/minecraft')
genPatches.addOriginalSource(fixedJar)
genPatches.addChangedSource(subproject.buildDir.toPath().resolve("libs/IndustrialCraft2-1.0-src.jar").toFile())
genPatches.dependsOn('applyFFPatches', ':IndustrialCraft2:srcJar')
genPatches.setGroup('ic2-patcher')

def genFFPatches = project.tasks.create("genFFPatches", classGenPatches)
genFFPatches.setPatchDir('ff_patches')
genFFPatches.setOriginalPrefix('../src-base/minecraft/')
genFFPatches.setChangedPrefix('../src-work/minecraft/')
genFFPatches.addOriginalSource(decompiledJar)
genFFPatches.addChangedSource(subproject.buildDir.toPath().resolve("libs/IndustrialCraft2-1.0-src.jar").toFile())
genFFPatches.dependsOn(':IndustrialCraft2:srcJar')
genFFPatches.setGroup('ic2-patcher')

String path = file(subproject.projectDir.getPath())

ExtractTask extractSrc = project.tasks.create("extractIC2Sources", ExtractTask.class)
extractSrc.from(patchedJar)
extractSrc.into(path+"/src/main/java")
extractSrc.include("ic2/**")
extractSrc.setDoesCache(false)
extractSrc.dependsOn(patchSources)
extractSrc.setGroup("ic2-patcher")

ExtractTask extractRes = project.tasks.create("extractIC2Resources", ExtractTask.class)
extractRes.from(patchedJar)
extractRes.into(path+"/src/main/resources")
extractRes.exclude("ic2/**", "org/**")
extractRes.setDoesCache(false)
extractRes.dependsOn(extractSrc)
extractRes.setGroup("ic2-patcher")

String patchPath = file('patches').getAbsolutePath()
FileTree patchDir = fileTree('patches')

task genBinIC2Patches {
    dependsOn 'downloadIC2', ':IndustrialCraft2:build'
    group 'ic2-patcher'

    File dirtyJar = subproject.buildDir.toPath().resolve("libs/IndustrialCraft2-1.0.jar").toFile()
    outputs.files(binPatches)

    doLast {
        genBinPatches(jarIC2, dirtyJar, patchPath, patchDir, binPatches)
    }
}

task genBinIC2DevPatches {
    dependsOn 'downloadDevIC2', ':IndustrialCraft2:devJar'
    group 'ic2-patcher'

    File dirtyJar = subproject.buildDir.toPath().resolve("libs/IndustrialCraft2-1.0-dev.jar").toFile()
    outputs.files(binPatches)
    outputs.upToDateWhen { false }

    doLast {
        genBinPatches(jarDevIC2, dirtyJar, patchPath, patchDir, binPatches)
    }
}

static void genBinPatches(File cleanJar, File dirtyJar, String patchPath, FileTree patchDir, File output) {
    Set<String> patchedFiles = new HashSet<String>()
    Delta delta = new Delta()
    for (File patch : patchDir) {
        String path = patch.getAbsolutePath().replace(".java.patch", "")
        path = path.substring(patchPath.length() + 1).replace('\\', '/')
        patchedFiles.add(path)
    }

    HashMap<String, byte[]> patches = new HashMap<String, byte[]>()

    createBinPatches(patches, patchedFiles, delta, "merged/", cleanJar, dirtyJar)

    byte[] data = createPatchJar(patches)
    data = pack200(data)
    data = compress(data)
    Files.write(data, output)
}

static void createBinPatches(HashMap<String, byte[]> patches, Set<String> patchedFiles, Delta delta, String root, File base, File target) throws Exception {
    try {
        JarFile cleanJ = new JarFile(base)
        JarFile dirtyJ = new JarFile(target)
        for (String name : patchedFiles) {
            name = name.split('/', 2)[1]
            JarEntry cleanE = cleanJ.getJarEntry(name + ".class")
            JarEntry dirtyE = dirtyJ.getJarEntry(name + ".class")

            if (dirtyE == null) { //Something odd happened.. a base IC2 class wasn't in the jar?
                continue
            }

            byte[] clean = (cleanE != null ? ByteStreams.toByteArray(cleanJ.getInputStream(cleanE)) : null)
            byte[] dirty = ByteStreams.toByteArray(dirtyJ.getInputStream(dirtyE))
            byte[] patchBytes = BinPatches.getBinPatchBytesWithHeader(delta, name, name, clean, dirty)
            patches.put(root + name.replace('/', '.') + ".binpatch", patchBytes)
        }
    } catch (Throwable t) {
        t.printStackTrace()
    }
}

static byte[] createPatchJar(HashMap<String, byte[]> patches) throws Exception {
    ByteArrayOutputStream out = new ByteArrayOutputStream()
    try {
        JarOutputStream jar = new JarOutputStream(out)
        for (Map.Entry<String, byte[]> entry : patches.entrySet()) {
            jar.putNextEntry(new JarEntry("binpatch/" + entry.getKey()))
            jar.write(entry.getValue())
        }
        jar.flush()
        jar.close()
    } catch (Throwable t) {
        t.printStackTrace()
    }
    out.flush()
    out.close()
    return out.toByteArray()
}

static byte[] pack200(byte[] data) throws Exception {
    JarInputStream inputStream = new JarInputStream(new ByteArrayInputStream(data))
    ByteArrayOutputStream out = new ByteArrayOutputStream()

    Packer packer = Pack200.newPacker()

    SortedMap<String, String> props = packer.properties()
    props.put(Packer.EFFORT, "9")
    props.put(Packer.KEEP_FILE_ORDER, Packer.TRUE)
    props.put(Packer.UNKNOWN_ATTRIBUTE, Packer.PASS)

    final PrintStream err = new PrintStream(System.err)
    System.setErr(new PrintStream(ByteStreams.nullOutputStream()))
    packer.pack(inputStream, out)
    System.setErr(err)

    err.close()
    inputStream.close()
    out.close()

    return out.toByteArray()
}

static byte[] compress(byte[] data) throws Exception {
    ByteArrayOutputStream out = new ByteArrayOutputStream()
    try {
        LzmaOutputStream lzma = new LzmaOutputStream.Builder(out).useEndMarkerMode(true).build()
        lzma.write(data)
        lzma.flush()
        lzma.close()
    } catch (Throwable t) {
        t.printStackTrace()
    }
    out.close()
    return out.toByteArray()
}