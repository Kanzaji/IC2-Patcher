import net.minecraftforge.gradle.tasks.ExtractTask
import net.minecraftforge.gradle.tasks.PatchSourcesTask
import net.minecraftforge.gradle.tasks.fernflower.ApplyFernFlowerTask

buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'de.undercouch:gradle-download-task:4.1.1'
    }
}
apply plugin: 'de.undercouch.download'
apply from: 'gradle/scripts/constants.gradle'

File decompiledJar = new File(buildDir, "tmp/industrialcraft-decompile.jar")
File fixedJar = new File(buildDir, "tmp/industrialcraft-fixed.jar")
File patchedJar = new File(buildDir, "tmp/industrialcraft-patched.jar")
Class<?> classGenPatches = Class.forName("net.minecraftforge.gradle.patcher.TaskGenPatches")

task downloadIC2(type: Download) {
    group 'ic2-patcher'
    src "https://jenkins.ic2.player.to/job/IC2_112/221/artifact/build/libs/industrialcraft-2-${VERSION_IC2}-ex112.jar"
    dest rootProject.ext.jarIC2
    overwrite false
}

task downloadDevIC2(type: Download) {
    group 'ic2-patcher'
    src "https://jenkins.ic2.player.to/job/IC2_112/221/artifact/build/libs/industrialcraft-2-${VERSION_IC2}-ex112-dev.jar"
    dest rootProject.ext.jarDevIC2
    overwrite false
}

ApplyFernFlowerTask decompileIC2 = project.tasks.create("decompileIC2", ApplyFernFlowerTask.class)
decompileIC2.setInJar(jarDevIC2)
decompileIC2.setOutJar(decompiledJar)
decompileIC2.setClasspath(project.getConfigurations().getByName('forgeGradleMcDeps'))
decompileIC2.setForkedClasspath(project.getConfigurations().getByName('forgeGradleFfiDeps'))
decompileIC2.dependsOn('downloadDevIC2')

PatchSourcesTask postDecompile = project.tasks.create("applyFFPatches", PatchSourcesTask.class)
postDecompile.setInJar(decompiledJar)
postDecompile.setOutJar(fixedJar)
postDecompile.setPatches(file("ff_patches"))
postDecompile.setDoesCache(false)
postDecompile.setMaxFuzz(2)
postDecompile.setFailOnError(false)
postDecompile.setMakeRejects(true)
postDecompile.dependsOn('decompileIC2')
postDecompile.setGroup("ic2-patcher")

PatchSourcesTask patchSources = project.tasks.create("applyIC2Patches", PatchSourcesTask.class)
patchSources.setInJar(fixedJar)
patchSources.setOutJar(patchedJar)
patchSources.setPatches(file("patches"))
patchSources.setDoesCache(false)
patchSources.setMaxFuzz(2)
patchSources.setFailOnError(false)
patchSources.setMakeRejects(true)
patchSources.dependsOn('applyFFPatches')
patchSources.setGroup("ic2-patcher")

def genPatches = project.tasks.create("genIC2Patches", classGenPatches)
genPatches.setPatchDir('patches/minecraft')
genPatches.setOriginalPrefix('../src-base/minecraft')
genPatches.setChangedPrefix('../src-work/minecraft')
genPatches.addOriginalSource(fixedJar)
genPatches.addChangedSource(subproject.buildDir.toPath().resolve("libs/IndustrialCraft2-1.0-src.jar").toFile())
genPatches.dependsOn('applyFFPatches', ':IndustrialCraft2:srcJar')
genPatches.setGroup('ic2-patcher')

def genFFPatches = project.tasks.create("genFFPatches", classGenPatches)
genFFPatches.setPatchDir('ff_patches')
genFFPatches.setOriginalPrefix('../src-base/minecraft/')
genFFPatches.setChangedPrefix('../src-work/minecraft/')
genFFPatches.addOriginalSource(decompiledJar)
genFFPatches.addChangedSource(subproject.buildDir.toPath().resolve("libs/IndustrialCraft2-1.0-src.jar").toFile())
genFFPatches.dependsOn(':IndustrialCraft2:srcJar')
genFFPatches.setGroup('ic2-patcher')

String path = file(subproject.projectDir.getPath())

ExtractTask extractSrc = project.tasks.create("extractIC2Sources", ExtractTask.class)
extractSrc.from(patchedJar)
extractSrc.into(path+"/src/main/java")
extractSrc.include("ic2/**")
extractSrc.setDoesCache(false)
extractSrc.dependsOn(patchSources)
extractSrc.setGroup("ic2-patcher")

ExtractTask extractRes = project.tasks.create("extractIC2Resources", ExtractTask.class)
extractRes.from(patchedJar)
extractRes.into(path+"/src/main/resources")
extractRes.exclude("ic2/**", "org/**")
extractRes.setDoesCache(false)
extractRes.dependsOn(extractSrc)
extractRes.setGroup("ic2-patcher")

task setupIC2 {
    group 'ic2-patcher'
    dependsOn 'setupDecompWorkspace'
    finalizedBy 'extractIC2Resources'
}