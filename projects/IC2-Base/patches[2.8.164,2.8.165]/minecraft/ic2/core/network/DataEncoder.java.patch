--- a/ic2/core/network/DataEncoder.java
+++ b/ic2/core/network/DataEncoder.java
@@ -391,7 +391,7 @@
          final int i2 = is.readVarInt();
          boolean flag3 = is.readBoolean();
          boolean flag = !dataencoder$encodedtype.threadSafe;
-         final Object object;
+         Object object;
          if (!flag) {
             object = Array.newInstance(oclass1, i2);
          } else {
@@ -432,12 +432,13 @@
             return object;
          }
 
+         Object finalObject = object;
          return new DataEncoder.IResolvableValue<Object>() {
             public Object get() {
                Object object3 = Array.newInstance(oclass, i2);
 
                for(int l2 = 0; l2 < i2; ++l2) {
-                  Array.set(object3, l2, DataEncoder.getValue(Array.get(object, l2)));
+                  Array.set(object3, l2, DataEncoder.getValue(Array.get(finalObject, l2)));
                }
 
                return object3;
@@ -467,7 +468,7 @@
 
          return Arrays.<Object>asList(object2);
       case Component:
-         return (List<Object>)decode(is, DataEncoder.EncodedType.NBTTagCompound);
+         return decode(is, DataEncoder.EncodedType.NBTTagCompound);
       case CropCard:
          return Crops.instance.getCropCard(is.readString(), is.readString());
       case Double:
